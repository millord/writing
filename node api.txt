NODE.js Rest API

1-npm init a project.
2-npm i express nodemon dotenv
3-add nodemon to the package.json
4-create the app.js
5-start listening in a basic express server
run the server
6-create a route to '/', sending the message "Hello world"
7-npm start
---
1-Connect to the database
-npm i mongoose
-create the .env
-save the mongoAtlas string there
-import mongoose into the app.js file
-connect to the database in the app.js file.

mongoose.connect(db, () => console.log('DB connected'))
2-create a folder with the routes name and move the routes inside.
3-and module.exports = router;

4-create a routes middleware
import the route into app.js (postRoutes).
Create the middleware.
// MIDDLEWARE

app.use('post', postsRoutes)

---
CREATE THE MODEL

1-create a model folder
-create the Post file
2-create the postSchema with these fields:
-title
-description
-date (add a default date)
3-export the model
module.exports = mongoose.model("Post", postSchema)

----
CREATE A POST
-add the app.use(express.json()) middleware.
1-Import in the model in the posts route file.
2-using router.post create the route.

 router.post('/',  async (req, res) => {
	const post =  new Post({
	title: req.body.title,
	description: req.body.description
  })
try {
   const savedPost = await post.save()
   res.json(savedPost)		
}catch(err)  {
  res.json({message: err})
}
})


//GETTING ALL THE POST

router.get('/', async(req, res) => {
    try{
      const posts  = await Post.find()
  }catch(err){
      res.json({message.err})
    }
  })
  

-----
// GET A SPECIFIC POST
router.get("/:postId", async (req, res) => {
  try {
    const post = await Post.findById(req.params.postId);
    res.json(post);
  } catch (err) {
    res.json({ message: err });
  }
});



/// DELETE A POST
router.delete('/:postId', async(req, res) => {
    
    try {
        const removedPost =  await Post.remove({_id: req.params.postId})
        res.json(removedPost)
    } catch (err) {
        res.json({message: err})
    }
})


// UPDATE A POST

router.patch('/:postId', async (req, res) => {
    try {
        const updatedPost = await Post.updateOne({_id: req.params.postId}, {$set: {title: req.body.title, description: req.body.description}}) 
        res.json(updatedPost)
    } catch (err) {
        res.json({message: err})
    }
    
})
