Three ways to map

with return:

<div className="App">
        {this.state.monsters.map(monster => {
          return <h1>{monster.name}</h1>;
        })}
</div>

with only parenthesis:
  {this.state.monsters.map(monster => (
          <h1>{monster.name}</h1>
  ))}

with none of that:

 <div className="App">
        {this.state.monsters.map(monster => (
          <h1>{monster.name}</h1>
        ))}
      </div>


// FETCHING DATA (repeat 3 times each)


fetch("http://localhost:8000/api/post")
  .then(reponse => reponse.json())
  .then(result => setPosts(result));

// with setState

fetch("http://localhost:8000/api/post")
  .then(reponse => reponse.json())
  .then(result => this.setState({ value: result }));


// AXIOS

with setState:

 componentDidMount() {
    axios
      .get("https://jsonplaceholder.typicode.com/users")
      .then(response => this.setState({ monsters: response.data }));
  }

with hooks:

 useEffect(() => {
    axios
      .get("http://localhost:8000/api/post")
      .then(res => {
        setPosts(res.data);
      })
      .catch(err => {
        console.log(err);
      });
  }, []);


/// GOOD REACT DEVELOPER

1-DECIDE ON COMPONENTS
2-DECIDE the State and where is lives
3-what changes when the State change.


//// FILTERING 


 const { presidents, searchField } = this.state;
    const filteredPresidents = presidents.filter(president =>
      president.name.toLowerCase().includes(searchField.toLowerCase())
    );



// FILTERING




const { monsters, searchField } = this.state;
    const filteredMonsters = monsters.filter(
      monster =>
        monster.email.toLowerCase().includes(searchField.toLowerCase()) |
        monster.name.toLowerCase().includes(searchField.toLowerCase())
    );


/// WHEN DOING THE MONSTERS PROJECT DO IT FIRST IN CLASS LATER FUNCTION
