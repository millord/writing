---Hard part jwt--

1-Validation with Joi

// Hard parts 5 times

// 1- import @hapi/joi

const Joi = require("@hapi/joi");

// 2- create the schema
// put it inside a function registerValidation

const registerValidation = data => {
  const schema = Joi.object({
    name: Joi.string()
      .min(6)
      .required(),
    email: Joi.string()
      .min(6)
      .email()
      .required(),
    password: Joi.string()
      .min(6)
      .required()
  });
  return schema.validate(data);
};

--REGISTERING THE USER--
// avoid the same email
// to block registering the same user
const emailExist = await User.findOne({ email: req.body.email });
if (emailExist) return res.status(400).send("Email already in the db...");

// check same email/user --LOGIN THE USER IN --- 
const user = await User.find({ email: req.body.email });
if (!user) return res.status(400).send("Wrong password or email..");


2-Hash the password

// import bcryptjs

// HASH THE PASSWORD
// const salt = await bcrypt.genSalt(10);
// const hashedPassword = await bcrypt.hash(req.body.password, salt);

// CREATE THE USER WITH THE HASHED PASS
// const newUser = new User({
//   name: req.body.name,
//   email: req.body.email,
//   password: hashedPassword
// });

// check for same password
-Check if you have the same password
const validPass = await bcrypt.compare(req.body.password, user.password)
if(!validPass) return res.status(400).send('Invalid user')


-add it to a function name auth that takes req, res, next
3-JWT

//CREATE THE TOKEN
// import jwt
//  const token = jwt.sign({ _id: user._id }, process.env.TOKEN_SECRET);
// SEND THE TOKEN IN THE HEADER
//  res.header("auth-token", token).send(token);
// create the private route middlewar


//0- create a function named auth, that takes req, res, and next as arguments

// 1- grab the token if there is not token accesss denied

//2- if there is token you need to verify

// 3- asign the token to req.user

//5- allow the next middleware
next();

const auth = (req, res, next) => {
  const token = req.header("auth-token");
  if (!token) return res.status(401).send("Access Denied");
  try {
    const verified = jwt.verify(token, process.env.TOKEN_SECRET);
    req.user = verified;
  } catch (err) {
    res.status(400).send("Invalid Token");
  }
  next();
};

module.exports = auth;

