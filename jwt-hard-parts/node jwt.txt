Steps JWT

1-create a project with npm init
2-install express, nodemon (setup nodemon), dotenv, morgan, mongoose (go to npm to see how to require it)
3-initialize a server with express (first require the dotenv)(add the port from process.env (add DB, PORT, AND TOKEN_SECRET), nodemon script)
4-create the routes folder
5-create a new file inside it called auth.js
6-create the router ( const router = require("express").Router()


7-create the register route using a post method. and test it
sending some string

8-import the routes in the server file and call it authRoute

9-create a route middlewares using:
app.use("/api/user", authRoute)



11-make a post request in postman to /api/user/register to test.

12- connect to mongodb from atlas (get mongoose)
15
13-create a .env file and add the mongo atlas connection
install mongoose

14-create the user  model with name, email, password, and date. 
name: min 6 max 30
email: min 6 max 255
password: max:1024 min 6
all required

export it with module.exports = mongoose.model("User", userSchema)

15-Import the model in the auth.js routes

CREATE A USER (Add the User model)and save it (ADD THE BODYPARSER app.use(express.json())
16-create a new User  in the register route using the data comming from the
req.body, and save the user (use async await). return it at the end

17-add a middleware to parse the req:
app.use(express.json())

18-Test saving the code in the database with inomsonia. (Content-Type: application/json)

VALIDATION
---- Validate information with @hapi/joi
19-install @hapi/joi
-import hapi/joi
-create the schema

name: string, min 6, required
email: string,email,  min 6, required
password: string, min 6, required

-create a function and put the Joi validation logic inside and export it

-check for validation before you save the user


-destructure the error object and check if you find some with:

const { error } = schema.validate(req.body);
if (error) return res.status(400).send(error.details[0].message);


-test the validation with insomnia
putting a invalid email and name...etc.

-In case you have an error with in the validate variable return a status of 400

--- SEPARATE THE JOI SCHEMA
1-create a validation.js in the root
2-copy the joi schema and wrap it in a function
FOR THE loginValidation only keed email and password
3-create login function and export them both using:


module.exports.registerValidation = registerValidation

module.exports.loginValidation = loginValidation 

4-import the validation.js into auth routes.


-------
AVOID SAME EMAIL
after the line of validation we should:
Check if the user is already in the database

const emailExist = await User.findOne({ email: req.body.email });
if (emailExist) return res.status(400).send("Email already in the db...");

----
HASH THE PASSWORD

Do it before creating the user
1-install bcriptjs
2-added to the project
3-use asych and await

const salt = await bcrypt.gentSalt(10)
const hashPassword = await bcrypt.hash(req.body.password, salt)

remember save the hashPassword instead of req.body.password
----
Create the login route

1-validate the user
2-check if the email does not exist in the database (copy)
ELIMITATE THE NAME FIELD

const { error } = loginValidation(req.body);
if (error) return res.status(400).send(error.details[0].message);

3-check if  you have the same email 
const user = await User.findOne({ email: req.body.email });
if (!user) return res.status(400).send("Wrong user or password...");

-Check if you have the same password
const validPass = await bcrypt.compare(req.body.password, user.password)
if(!validPass) return res.status(400).send('Invalid password')

4- AT THE END YOU send the user!

 TEST THE ROUTE
-------

//3-import jwt
// add the token_secret into the .env file
//CREATE AND ASIGN THE TOKEN
//  const token = jwt.sign({ _id: user._id }, process.env.TOKEN_SECRET);
// SEND THE TOKEN IN THE HEADER
//  res.header("auth-token", token).send(token);
// create the private route middleware


below the part when you check the password create and asign the token

TEST THE ROUTE


4-MAKE A ROUTE PRIVATE
create a new file inside the routes folder and add called protectedRoute.js this function:

const jwt = require("jsonwebtoken");

//0- create a function named auth, that takes req, res, and next as arguments
function auth(req, res, next) {
  // 1- grab the token from the header if there is not token accesss denied
  const token = req.header("auth-token");
  if (!token) return res.status(401).send("Access denied");
  try {
    //2- if there is token you need to verify
    const verified = jwt.verify(token, process.env.TOKEN_SECRET);
    // 3- asign the token to req.user
    req.user = verified;
    // 4-if there is an error send Invalid token
  } catch (err) {
    res.status(400).send("Invalid token");
  }
  //5- allow the next middleware
  next();





