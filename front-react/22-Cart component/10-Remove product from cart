 1-Go to cartHelpers


2-reuse updateItem and name it removeItem

modofy:

most all stays the same (updating and removing most of the time
do the same)

in the mapping part:

change cart[i].count = count;    to: cart.splice(i,1)

and besides of setting the item with localStorate return the cart  below it

3-import it in Cart.js

add it as a prop to the Card component (which is in the return of the Cart component):


/// Remove Item
export const removeItem = (productId) => {
  let cart = [];
  if (typeof window !== "undefined") {
    if (localStorage.getItem("cart")) {
      cart = JSON.parse(localStorage.getItem("cart"));
    }

    cart.map((product, i) => {
      if (product._id === productId) {
        cart.splice(i, 1);
      }
    });

    localStorage.setItem("cart", JSON.stringify(cart));
  }
  return cart;
};


showRemoveProductButton={true}

4-Go to the Card component and take it as props:

showRemoveProductButton = false


5-create the function below (inside the Cart component), reuse the showAddToCart function, and modify it:

name: showRemoveButton
taking as paramenter: showRemoveProductButton
in the return 

return showRemoveProductButton && (...

-give it to the button a class instead of warning to danger
-change the text inside to Remove Product
-in the onClick:

onClick={() => removeItem(product._id)}

6-Go above the showCartUpdateOptions:

{showRemoveButton(shoRemoveProductButton)}


---TEST IT---


7-Updating the useEffect to re-render the updated items list

-Go into the Cart.js and add --items-- into the useEffect




