
--Call the api for showing related products


1-Go to apiCore.js

reuse the read method and modify:

name: listRelated
params: productId
url for fetch: API/products/related/${productId}

That's it.

2-Import it in Products

3-Create a function in Product.js
Add the state

const [relatedProduct, setRelatedProduct] = useState([])

4-Taking advantage of the loadSingleProduct, place  listRelated below the setProduct(data) (in the same block of code)

listRelated(data._id).then(data =>{
   if(data.error){
      setError(data.error)
  }else{
   setRelatedProduct(data)     
  }
})

5-Pass the relatedProduct to the Card

-First, remove everything only leaving the div the class row
-there create two divs
-one with col-8 and the other with col-4

-In the first div copy what you had before:

{product && product.description && (
<Card product={product} showViewProductButton={false} />
)}

in the second div, placing the iteration in a div with calss mb-3: 

 <h4>Related Products</h4>
{relatedProduct.map((p, i) => (
<div className="mb-3">
<Card key={i} product={p} />


6-Make the links of the related products work:

modify the useEffect in the Products component, in the array, instead of empty add inside the array [props]


