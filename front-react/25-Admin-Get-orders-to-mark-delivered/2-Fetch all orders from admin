Video: 124

-- In the previous section we worked in the backend so we can get all the orders, now its time to work in the fron-end

1-go to the apiAdmin and reuse a GET method.

-reuse the getCategories method and made some changes:

name: listOrders
parameters -- userId, token
fetch: `{API}/order/list/userId`
method: GET
headers:Accept, Authorization

-The response keeps the same.

2-Before we use it, we need to create a component in the admin folder.

-Call it Order.js

-reuse the imports from the AddProduct component.

-create a functional component.

-import the listOrders function from apiAdmin.js
-get the user and token from isAuthenticated

// first thing, make a request to the backend
// to get all the orders

const Orders = () => {
  const [orders, setOrders] = useState([]);

  const { user, token } = isAuthenticated();

  const loadOrders = () => {
    listOrders(user._id, token).then((data) => {
      if (data.error) {
        console.log(data.error);
      } else {
        setOrders(data);
      }
    });
  };

  useEffect(() => {
    loadOrders();
  }, []);

  // if there are not orders you want to show
  // some kind of message
  const noOrders = (orders) => {
    return orders.length < 1 ? <h4>No orders</h4> : null;
  };
  return (
    <Layout
      title="Orders"
      description={`G'day ${user.name}, you can manage all the orders here`}
      className="container-fluid"
    >
      <div className="col-md-8 offset-md-2">
        {noOrders(orders)}
        {JSON.stringify(orders)}
      </div>
    </Layout>
  );
};


3-import it in Routes

-it will be AdminRoute

path='/admin/orders/'


4-Go into AdminDashboard.js

-Add a new link 
to="/admin/orders"
View Orders 
