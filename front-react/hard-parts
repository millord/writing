2-create the Signin.js with the same approach of the Signup.js


3-create the Routes.js inside the src

-import BrowserRouter, Switch and Route from react-router-dom
-import Signup and Signin into this component (Routes).

make it a funcitonal component name Routes.

in the return place a Switch (inside the Switch you can add the Routes)

<Route path="/signin" exact component={Signin} />

create other  Route for signup

PLACE THE Routes.js in the index.js instead of App.js

Active link helper

const isActive = (history, path) => {
  if(history.location.pathname === path){
    return {color: "#ff9900"}
 } else {
     return {color: "#fffff"} 
   }
}

1-Above the return start creating the signUpForm function like this:


const SignUpForm = () => (
    <form>
      <div className="form-group">
        <label className="text-muted">Name</label>
        <input type="text" className="form-control" />
      </div>
    ...
    </form>
  );


User Signup


1- in the button add an onClick method with clickSubmit (also add it to the button) inside.

2-createt the function below handleChange.


const clickSubmit = (event) => {
    event.preventDefault()
    signup(name, email, password)
  }


-First after the useState destructure all the values:

const { name, email, password } = values;

- to create  new user create a new method called signup and place it
inside the clickSubmit handler.

const signup = () => {
   console.log(name, email, password);
}


User Signup part 2

const signup = user => {
    fetch(`${API}/signup`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify(user)
    })
      .then(response => {
        return response.json();
      })
      .catch(err => {
        console.log(err);
      });
  };



User signup success and error

go to the signup for and controlled the input values

-go into input for the name and add: 
value={name}
email={email}
password={password}

-go to the clickSubmit and since is a promise you can catch the error.
-add this after:
signup({name, email, password})
.then(data => {
   if(data.error){
    setValues({...values, error: data.error, success: false })
 } else {
    setValues({
     ...values,
     name: '',
     email: '',
     password: ''
     error: ''
     success: error
 })
}
})


REMEMBER THIS HAPPENS AFTER CREATING THE USER.



if we get an error we will update the error in the state

User signup success and error part 2

-right below the signUpForm create the methods:

const showError = () => (
  <div className="alert alert-danger" style={{ diplay: error ? "" : "none" }}>
    {error}
  </div>;
);

-for success:

const showSuccess = () => (
  <div className="alert alert-info" style={{ diplay: success ? "" : "none" }}>
    New account is created. Please signin.
  </div>;
);

call the two methods on top of the signUpForm inside the Layout.


1-Disctructure error and success at the top  along with the other values.

--TEST IT AND PUT ***return before the fetch method***

1-After the evet.preventDefault add:
setValues({...values, error: false})


2-Add the Link to go to signin

on the show success replace signin for:
 <Link to="/signin">signin</Link> 

User signin 

-Go into the index.js inside auth

-Copy the signup method and rename it signin:
-change the route of fetch.

== THATS IT, Test it.


1-Now go to the Signin.js and copy all from the Signup.js

*Make some changes:

-name of the component
-import signin from auth
-in the clickSubmit use signin instead of signup
-send only email and password, get rid of the name in the signin function parameters
-in the form delete the name.
-remove the name of the state
-change success for loading: false
-add a redirectToReferrer into the state with value of false.

2-Change the destructure, add loading and remove, name, success, redirectToReferrer.

-handleChange wills stay the same
-in the clickSubmit in seating the values, add loading to true.

-but if you get any error set loading to false

-Eliminate all the values just leave ...values and add:
redirectToReferrer: true

--YOU DONT NEED TO WORRY ABOUT EMPTYING THE VALUES


3-Below change showSucces for showLoading.

-in the body of the function add:

loading && (<div className="alert alert-info"><h2>Loading...</h2><div>)

4-Below the showLoading create the function redirectUser:

const redirectUser = () => {
  if(redirectToReferrer){
    return <Redirect to="/" />
 }
}

import from Redirect at the top.

5-Go to the botton instead of showSucces put showLoading and below signUpForm add
{redirectUser()}


Saving user token in localStorage


1-Go to the state of the Signin component and hard-core the values:

email: "juanmillord@gmail.com"
password: "1234567"

2-clear the data from the localStorage going in the developer tools to application
and clear storage.

3-go to the auth/index.js and add at the bottom:

export const authenticate  = (data, next) => {
    if(typeof window !== "undefined") {
      localStorage.setItem('jwt", JSON.stringify(data))
       next();
  } 
}

4-go into the Signin component and in the else block, remove
the values including the redirect and add instead:

authenticate(
   data,
   () => {
   setValues({
   ...values,
   redirectToReferrer:true
  })  
  }
 )

 User logout

go to the index.js in the auth folder

-create a new function:

a) remove the token from localStorage.
b) request to backend that we are logout
c) redirect the user.

export const signout = next => {
  if(typeof window !== "undefined"){
    localStorage.removeItem('jwt')
    next()
    return fetch(`${API}/signout`, {
      method: "GET"
    })
    .then(response => {
      console.log('signout', response)
    }).catch(err => console.log(err))
  }
}

1-import the signout into the Menu component.
-Copy one li and change it to Signout
-remove the style and add: 
   style={{cursor: "pointer", color: "white"}}
-instead to="/signup" change it to:

onClick={() =>  signout(() => {
  history.push("/")
})}


-change the li to a span

Conditionally show 


1-Create a helper method in the auth/index

called the function:

export const isAuthenticated = () => {
  if (typeof window == "undefined") {
    return false;
  }
  if (localStorage.getItem("jwt")) {
    return JSON.parse(localStorage.getItem("jwt"));
  } else {
    return false;
  }
};

2-import this method into the Menu component.

3-If no authenticated we will show the signin and signup 

-cut the signup and signin links and put them into a block

{!isAutenticated && ( --<div>put the links here-- </div>)}

4- signup

cut it and put it into a block checking if isAuthenticated show the link:
{isAuthenticated() && (--put link here --)}

5-Fixing the style:

Wrap all the links into a Fragment.


